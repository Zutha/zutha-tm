%prefix zsi http://psi.zutha.net/
%prefix ztm http://psi.zutha.net/topicmap/
%prefix tmdm http://psi.topicmaps.org/iso13250/model/

# ==================== General Purpose Templates ====================

# IS A
def is-a($instance, $type)
    $instance isa $type.
    tmdm:type-instance(
        tmdm:type: $type,
        tmdm:instance: $instance
    )
end

# KIND OF
def kind-of($subtype, $supertype, $reifier)
    $reifier isa zsi:supertype-subtype.
    zsi:supertype-subtype(
        zsi:subtype: $subtype,
        zsi:supertype: $supertype
    ) ~ $reifier
end

# ITEM HAS TRAIT
def has-trait($item, $trait, $reifier)
    $reifier isa zsi:item-has-trait
    .
    zsi:item-has-trait(
        zsi:item: $item,
        zsi:trait: $trait
    ) ~ $reifier
    #topic map implementation
    ?anon isa ztm:anonymous-topic;
        ako $trait.
    $item isa ?anon.
    ztm:anonymous-topic-link(
        ztm:reified-zdm-association: $reifier,
        ztm:anonymous-topic: ?anon
    )
end

# PROPERTY
def property($item, $propType, $value, $reifier)
    $reifier isa $propType
    .
    $item
    $propType: $value ~ $reifier.
end

# NAME
def name($item, $value, $reifier)
    $reifier isa zsi:name
    .
    $item
        - zsi:name: $value ~ $reifier.
end
def name($item, $value, $scope, $reifier)
    $reifier isa zsi:name
    .
    $item
        - zsi:name: $value @$scope ~$reifier.
end

# IDENTIFIER
def identifier($item, $uri, $reifier)
    $item $uri.
    property($item, zsi:identifier, $uri, $reifier)
end

# EXTERNAL IDENTIFIER
def external-identifier($item, $uri, $reifier)
    $item $uri.
    property($item, zsi:external-identifier, $uri, $reifier)
end

# ==================== Schema Templates ====================

# ABSTRACT CONSTRAINT
def is-abstract($type, $reifier)
    $reifier isa zsi:abstract-constraint;
    .
    zsi:abstract-constraint(
        zsi:type: $type
    ) ~ $reifier
end

# TYPE HAS ROOT ITEM CONSTRAINT
def root-of($rootItem, $type, $reifier)
    $reifier isa zsi:type-has-root-item-constraint;
    .
    zsi:type-has-root-item-constraint(
        zsi:root-item: $rootItem,
        zsi:type: $type
    ) ~ $reifier
end
def has-root($type, $rootItem, $reifier)
    root-of($rootItem, $type)
end

# ITEM TYPE TRAIT DECLARATION
def may-have-trait($itemType, $trait, $reifier)
    $reifier isa zsi:item-type-trait-declaration;
    .
    zsi:item-type-trait-declaration(
        zsi:item-type: $itemType,
        zsi:trait: $trait
    ) ~ $reifier
end

# PROPERTY DECLARATION
def has-property($declarer, $propType, $min, $max, $reifier)
    $reifier isa zsi:property-declaration;
        zsi:property-card-min: $min;
        zsi:property-card-max: $max;
    .
    zsi:property-declaration(
        zsi:property-declarer: $declarer,
        zsi:property-type: $propType
    ) ~ $reifier
end
def has-property($declarer, $propType, $min, $max, $reifier, $overrides, $overideReifier)
    has-property($declarer, $propType, $min, $max, $reifier)
    $overideReifier isa zsi:overrides-declaration
    .
    zsi:overrides-declaration(
        zsi:overriding-declaration: $reifier,
        zsi:overridden-declaration: $overrides
    ) ~ $overideReifier
end

# ASSOCIATION FIELD DECLARATION
def plays-role($declarer, $role, $assocType, $min, $max, $reifier)
    $reifier isa zsi:association-field-declaration;
        zsi:association-card-min: $min;
        zsi:association-card-max: $max;
    .
    zsi:association-field-declaration(
        zsi:association-field-declarer: $declarer,
        zsi:role: $role,
        zsi:association-type: $assocType
    ) ~ $reifier
end
def plays-role($declarer, $role, $assocType, $min, $max, $reifier, $overrides, $overideReifier)
    plays-role($declarer, $role, $assocType, $min, $max, $reifier)
    $overideReifier isa zsi:overrides-declaration
    .
    zsi:overrides-declaration(
        zsi:overriding-declaration: $reifier,
        zsi:overridden-declaration: $overrides
    ) ~ $overideReifier
end

# ASSOCIATION ROLE CONSTRAINT
def has-role($assocType, $role, $min, $max, $reifier)
    $reifier isa zsi:association-role-constraint;
        zsi:role-card-min: $min;
        zsi:role-card-max: $max;
    .
    zsi:association-role-constraint(
        zsi:association-type: $assocType,
        zsi:role: $role
    ) ~ $reifier
end
def has-role($assocType, $role, $min, $max, $reifier, $overrides, $overideReifier)
    has-role($assocType, $role, $min, $max, $reifier)
    $overideReifier isa zsi:overrides-declaration
    .
    zsi:overrides-declaration(
        zsi:overriding-declaration: $reifier,
        zsi:overridden-declaration: $overrides
    ) ~ $overideReifier
end

# ASSOCIATION PROPERTY CONSTRAINT
def has-assoc-prop($assocType, $propType, $min, $max, $reifier)
    $reifier isa zsi:association-property-constraint;
        zsi:property-card-min: $min;
        zsi:property-card-max: $max;
    .
    zsi:association-property-constraint(
        zsi:association-type: $assocType,
        zsi:property-type: $propType
    ) ~ $reifier
end
def has-assoc-prop($assocType, $propType, $min, $max, $reifier, $overrides, $overideReifier)
    has-assoc-prop($assocType, $propType, $min, $max, $reifier)
    $overideReifier isa zsi:overrides-declaration
    .
    zsi:overrides-declaration(
        zsi:overriding-declaration: $reifier,
        zsi:overridden-declaration: $overrides
    ) ~ $overideReifier
end

# ROLE COMBINATION CONSTRAINT
def role-combination($assocType,$role1,$itemType1,$role2,$itemType2,$comboItem,$reifier0,$reifier1,$reifier2)
    $comboItem isa zsi:role-combination.
    $reifier0 isa zsi:association-has-role-combination-constraint.
    $reifier1 isa zsi:role-combination-constraint.
    $reifier2 isa zsi:role-combination-constraint.
    
    zsi:association-has-role-combination-constraint(
        zsi:role-combination: $comboItem,
        zsi:association-type: $assocType
    ) ~ $reifier0
    zsi:role-combination-constraint(
        zsi:role-combination: $comboItem,
        zsi:role: $role1,
        zsi:type: $itemType1
    ) ~ $reifier1
    zsi:role-combination-constraint(
        zsi:role-combination: $comboItem,
        zsi:role: $role2,
        zsi:type: $itemType2
    ) ~ $reifier2
end

# FIELD HAS SCOPE ITEM CONSTRAINT
def has-scope-item($fieldType, $scopeItem, $min, $max, $reifier)
    $reifier isa zsi:field-has-scope-item-constraint;
        zsi:scope-item-card-min: $min;
        zsi:scope-item-card-max: $max;
    .
    zsi:field-has-scope-item-constraint(
        zsi:field-type: $fieldType,
        zsi:scope-item: $scopeItem
    ) ~ $reifier
end

# FIELD HAS SCOPE ITEM TYPE CONSTRAINT
def has-scope-item-type($fieldType, $scopeItemType, $min, $max, $reifier)
    $reifier isa zsi:field-has-scope-item-type-constraint;
        zsi:scope-item-type-card-min: $min;
        zsi:scope-item-type-card-max: $max;
    .
    zsi:field-has-scope-item-type-constraint(
        zsi:field-type: $fieldType,
        zsi:scope-item-type: $scopeItemType
    ) ~ $reifier
end

# FIELD WITH SCOPE ITEM DECLARATION
def has-scope-item($declarer, $fieldType, $scopeItem, $min, $max, $reifier)
    $reifier isa zsi:field-with-scope-item-declaration;
        zsi:field-card-min: $min;
        zsi:field-card-max: $max;
    .
    zsi:field-with-scope-item-declaration(
        zsi:field-declarer: $declarer,
        zsi:field-type: $fieldType,
        zsi:scope-item: $scopeItem
    ) ~ $reifier
end

# FIELD WITH SCOPE ITEM TYPE DECLARATION
def has-scope-item-type($declarer, $fieldType, $scopeItemType, $min, $max, $reifier)
    $reifier isa zsi:field-with-scope-item-type-declaration;
        zsi:field-card-min: $min;
        zsi:field-card-max: $max;
    .
    zsi:field-with-scope-item-type-declaration(
        zsi:field-declarer: $declarer,
        zsi:field-type: $fieldType,
        zsi:scope-item-type: $scopeItemType
    ) ~ $reifier
end

# UNIQUE VALUE CONSTRAINT
def has-unique-value($propType, $reifier)
    $reifier isa zsi:unique-value-constraint;
    .
    zsi:unique-value-constraint(
        zsi:property-type: $propType
    ) ~ $reifier
end

# PROPERTY DATA TYPE CONSTRAINT
def has-datatype($propType, $dataType, $reifier)
    $reifier isa zsi:property-datatype-constraint;
    .
    zsi:property-datatype-constraint(
        zsi:property-type: $propType,
        zsi:datatype: $dataType
    ) ~ $reifier
end

# REGULAR EXPRESSION CONSTRAINT
def matches-regexp($propType, $regexp, $reifier)
    $reifier isa zsi:regular-expression-constraint;
        zsi:regexp: $regexp;
    .
    zsi:regular-expression-constraint(
        zsi:property-type: $propType
    ) ~ $reifier
end
%prefix zid http://zutha.net/item/
%prefix zsi http://psi.zutha.net/
%prefix zdt http://psi.datatype.zutha.net/
%prefix ztm http://psi.zutha.net/topicmap/

%prefix tmcl http://psi.topicmaps.org/tmcl/
%prefix tmdm http://psi.topicmaps.org/iso13250/model/
%prefix xsd http://www.w3.org/2001/XMLSchema#
%prefix iso http://psi.topicmaps.org/iso13250/

# =============== Topic Map equivalence ==============
zsi:item tmdm:subject.
zsi:type tmdm:type.
zsi:supertype tmdm:supertype.
zsi:subtype tmdm:subtype.
zsi:instance tmdm:instance.
zsi:type-instance tmdm:type-instance.
zsi:supertype-subtype tmdm:supertype-subtype.
zsi:item-type tmcl:topic-type.
zsi:role tmcl:role-type.
zsi:association-type tmcl:association-type.
zsi:property-type tmcl:occurrence-type.

# ==================== Item Types ====================

# ITEM
zsi:item zid:01; isa zsi:item-type;
    has-trait(zsi:role,zid:02);
    kind-of(zsi:item,zid:03);

    external-identifier(tmdm:subject, zid:04);
    name("Item",zid:05);

    is-abstract(zid:06);
    root-of(zsi:item-type,zid:07);
    has-property(zsi:zid,1,*,zid:08);
    has-property(zsi:name,0,*,zid:09);
    has-property(zsi:description,0,1,zid:0A);
    plays-role(zsi:instance,
        zsi:type-instance,1,1,zid:0B);
    plays-role(zsi:item,
        zsi:item-has-trait,0,*,zid:0C);
    plays-role(zsi:scope-item,
        zsi:field-with-scope-item-declaration,0,*,zid:0D);
    plays-role(zsi:item,
        zsi:field-set-lock,0,*,zid:0E);
.

# TYPE
zsi:type zid:0F; isa zsi:item-type;
    has-trait(zsi:role,zid:0G);
    kind-of(zsi:item,zid:0H);

    external-identifier(tmdm:type, zid:0J);
    name("Type",zid:0K);

    plays-role(zsi:type,
        zsi:abstract-constraint,0,1,zid:0L);
    plays-role(zsi:supertype,
        zsi:supertype-subtype,0,*,zid:0M);
    plays-role(zsi:subtype,
        zsi:supertype-subtype,0,*,zid:0N);
    plays-role(zsi:type,
        zsi:role-combination-constraint,0,*,zid:0P);
    plays-role(zsi:root-item,
        zsi:type-has-root-item-constraint,0,1,zid:0Q);
    plays-role(zsi:type,
        zsi:type-has-root-item-constraint,0,1,zid:0R);
    plays-role(zsi:scope-item-type,
        zsi:construct-scope-constraint,0,*,zid:0T);
    plays-role(zsi:scope-item-type,
        zsi:field-with-scope-item-type-declaration,0,*,zid:0U);
.

# ITEM TYPE
zsi:item-type zid:0V; isa zsi:item-type;
    has-trait(zsi:role,zid:0W);
    kind-of(zsi:type,zid:0X);
    kind-of(zsi:property-declarer,zid:0Y);
    kind-of(zsi:association-field-declarer,zid:010);

    external-identifier(tmcl:topic-type, zid:011);
    name("Item Type",zid:012);

    plays-role(zsi:type,
        zsi:type-instance,0,*,zid:013);
    plays-role(zsi:item-type,
        zsi:item-type-trait-declaration,0,*,zid:014);
    may-have-trait(zsi:role,zid:015);
    may-have-trait(zsi:trait,zid:016);
.

# ENTITY TYPE
zsi:entity-type zid:017; isa zsi:item-type;
    kind-of(zsi:item-type,zid:018);

    name("Entity Type",zid:019);
 .

# TRAIT
zsi:trait zid:01A; isa zsi:item-type;
    has-trait(zsi:trait,zid:01B);
    has-trait(zsi:role,zid:01C);
    kind-of(zsi:type,zid:01D);
    kind-of(zsi:property-declarer,zid:01E);
    kind-of(zsi:association-field-declarer,zid:01F);

    name("Trait",zid:01G);

    plays-role(zsi:trait,
        zsi:item-has-trait,0,*,zid:01H);
    plays-role(zsi:trait,
        zsi:item-type-trait-declaration,0,*,zid:01J);
    may-have-trait(zsi:role,zid:01K);
.

# ROLE
zsi:role zid:01L; isa zsi:item-type;
    kind-of(zsi:type,zid:01M);
    has-trait(zsi:trait,zid:01N);
    has-trait(zsi:role,zid:01P);

    external-identifier(tmcl:role-type, zid:01Q);
    name("Role",zid:01R);

    plays-role(zsi:role,
        zsi:association-role-constraint,0,*,zid:01T);
    plays-role(zsi:role,
        zsi:association-field-declaration,0,*,zid:01U);
    plays-role(zsi:role,
        zsi:role-combination-constraint,0,*,zid:01V);
.

# SCHEMA ITEM
zsi:schema-item zid:01W; isa zsi:item-type;
    kind-of(zsi:item,zid:01X);

    name("Schema Item",zid:01Y);

    is-abstract(zid:020);
.

# ENTITY
zsi:entity zid:021; isa zsi:entity-type;
    kind-of(zsi:item,zid:022);

    name("Entity",zid:023);

    is-abstract(zid:024);
.

# REAL ENTITY
zsi:real-entity zid:025; isa zsi:entity-type;
    kind-of(zsi:entity,zid:026);

    name("Real Entity",zid:027);

    is-abstract(zid:028);
.

# ZUTHA OBJECT
zsi:zutha-object zid:029; isa zsi:entity-type;
    kind-of(zsi:entity,zid:02A);

    name("Zutha Object",zid:02B);

    is-abstract(zid:02C);
.

# DATA TYPE
zsi:datatype zid:02D; isa zsi:entity-type;
    kind-of(zsi:entity,zid:02E);
    has-trait(zsi:role,zid:02F);
    has-trait(zsi:trait,zid:02G);
    
    name("Data Type",zid:02H);

    is-abstract(zid:02J);
    plays-role(zsi:datatype,
        zsi:property-datatype-constraint,0,*,zid:02K);
.

# ==================== Roles ====================

# SUPERTYPE
zsi:supertype zid:02L; isa zsi:role;
    external-identifier(tmdm:supertype, zid:02M);
    name("Supertype",zid:02N);
.

# SUBTYPE
zsi:subtype zid:02P; isa zsi:role;
    external-identifier(tmdm:subtype, zid:02Q);
    name("Subtype",zid:02R);
.

# INSTANCE
zsi:instance zid:02T; isa zsi:role;
    external-identifier(tmdm:instance, zid:02U);
    name("Instance",zid:02V);
.

# ---------------------- kinds of Construct Type ----------------------

# CONSTRUCT TYPE
zsi:construct-type zid:02W; isa zsi:item-type;
    has-trait(zsi:role,zid:02X);
    kind-of(zsi:type,zid:02Y);

    name("Construct Type",zid:030);

    plays-role(zsi:construct-type,
        zsi:construct-scope-constraint,0,*,zid:031);
.

# ASSOCIATION TYPE
zsi:association-type zid:032; isa zsi:item-type;
    has-trait(zsi:role,zid:033);
    kind-of(zsi:construct-type,zid:034);

    external-identifier(tmcl:association-type, zid:035);
    name("Association Type",zid:036);

    plays-role(zsi:association-type,
        zsi:association-role-constraint,1,*,zid:037);
    plays-role(zsi:association-type,
        zsi:association-property-constraint,0,*,zid:038);
    plays-role(zsi:association-type,
        zsi:association-field-declaration,0,*,zid:039);
    plays-role(zsi:association-type,
        zsi:association-has-role-combination-constraint,0,*,zid:03A);
    plays-role(zsi:association-type,
        zsi:association-field-with-scope-item-declaration,0,*,zid:03B);
    plays-role(zsi:association-type,
        zsi:association-field-with-scope-item-type-declaration,0,*,zid:03C);
    plays-role(zsi:association-type,
        zsi:association-field-set-lock,0,*,zid:03D);
.

# CALCULATED ASSOCIATION TYPE
zsi:calculated-association-type zid:03E; isa zsi:item-type;
    kind-of(zsi:association-type,zid:03F);

    name("Calculated Association Type",zid:03G);

    has-property(zsi:calculated-association-rule,1,1,zid:03H);
    has-property(zsi:calculated-association-rule-description,0,1,zid:03J);
.

# PROPERTY TYPE
zsi:property-type zid:03K; isa zsi:item-type;
    has-trait(zsi:role,zid:03L);
    kind-of(zsi:construct-type,zid:03M);

    external-identifier(tmcl:occurrence-type, zid:03N);
    name("Property Type",zid:03P);

    plays-role(zsi:property-type,
        zsi:property-declaration,0,*,zid:03Q);
    plays-role(zsi:property-type,
        zsi:property-datatype-constraint,1,1,zid:03R);
    plays-role(zsi:property-type,
        zsi:unique-value-constraint,0,1,zid:03T);
    plays-role(zsi:property-type,
        zsi:regular-expression-constraint,0,*,zid:03U);
    plays-role(zsi:property-type,
        zsi:property-with-scope-item-declaration,0,*,zid:03V);
    plays-role(zsi:property-type,
        zsi:property-with-scope-item-type-declaration,0,*,zid:03W);
    plays-role(zsi:property-type,
        zsi:property-set-lock,0,*,zid:03X);
    may-have-trait(zsi:datatype,zid:03Y);
.

# EMBEDDED PROPERTY TYPE
zsi:embedded-property-type zid:040; isa zsi:item-type;
    kind-of(zsi:property-type,zid:041);

    name("Embedded Property Type",zid:042);
.

# ASSOCIATION PROPERTY TYPE
#--- identifies the properties that appear in association-fields
zsi:association-property-type zid:043; isa zsi:item-type;
    kind-of(zsi:embedded-property-type,zid:044);

    name("Association Property Type",zid:045);

    plays-role(zsi:property-type,
        zsi:property-declaration,0,0,zid:046,zid:03Q,zid:047);
    plays-role(zsi:property-type,
        zsi:association-property-constraint,0,*,zid:048);
.

# SYSTEM PROPERTY TYPE
zsi:system-property-type zid:049; isa zsi:item-type;
    kind-of(zsi:property-type,zid:04A);

    name("System Property Type",zid:04B);
.
# ---------------------- kinds of Reified Construct Type ----------------------

# REIFIED CONSTRUCT TYPE
zsi:reified-construct-type zid:04C; isa zsi:item-type;
    kind-of(zsi:item-type,zid:04D);
    kind-of(zsi:construct-type,zid:04E);

    name("Reified Construct Type",zid:04F);
.

# REIFIED ASSOCIATION TYPE
zsi:reified-association-type zid:04G; isa zsi:item-type;
    kind-of(zsi:reified-construct-type,zid:04H);
    kind-of(zsi:association-type,zid:04J);

    name("Reified Association Type",zid:04K);
.

# REIFIED PROPERTY TYPE
zsi:reified-property-type zid:04L; isa zsi:item-type;
    kind-of(zsi:reified-construct-type,zid:04M);
    kind-of(zsi:property-type,zid:04N);

    name("Reified Property Type",zid:04P);
.


# ---------------------- Construct Types ----------------------

# CONSTRUCT
zsi:construct zid:04Q; isa zsi:construct-type;
    name("Construct",zid:04R);

    is-abstract(zid:04T);
    root-of(zsi:construct-type,zid:04U);
.

# ASSOCIATION
zsi:association zid:04V; isa zsi:association-type;
    kind-of(zsi:construct,zid:04W);

    name("Association",zid:04X);

    is-abstract(zid:04Y);
    root-of(zsi:association-type,zid:050);
.

# PSEUDO ASSOCIATION
zsi:pseudo-association zid:051; isa zsi:association-type;
    kind-of(zsi:association,zid:052);

    is-abstract(zid:053);
    name("Pseudo Association",zid:054);
.

# CALCULATED ASSOCIATION
zsi:calculated-association zid:055; isa zsi:calculated-association-type;
    kind-of(zsi:association,zid:056);

    name("Calculated Association",zid:057);

    is-abstract(zid:058);
    root-of(zsi:calculated-association-type,zid:059);
.

# PROPERTY
zsi:property zid:05A; isa zsi:property-type;
    kind-of(zsi:construct,zid:05B);

    name("Property",zid:05C);

    is-abstract(zid:05D);
    root-of(zsi:property-type,zid:05E);
.

# EMBEDDED PROPERTY
#--- non-reified mutable property whose field-lock and scope are either derived or unavailable
zsi:embedded-property zid:05F; isa zsi:embedded-property-type;
    kind-of(zsi:property,zid:05G);

    name("Embedded Property",zid:05H);

    root-of(zsi:embedded-property-type,zid:05J);
.

# ASSOCIATION PROPERTY
zsi:association-property zid:05K; isa zsi:association-property-type;
    kind-of(zsi:embedded-property,zid:05L);

    name("Association Property",zid:05M);

    root-of(zsi:association-property-type,zid:05N);
.

# SYSTEM PROPERTY
zsi:system-property zid:05P; isa zsi:system-property-type;
    kind-of(zsi:property,zid:05Q);

    name("System Property",zid:05R);

    root-of(zsi:system-property-type,zid:05T);
.

# ---------------------- Reified Construct Types ----------------------

# REIFIED CONSTRUCT
zsi:reified-construct zid:05U; isa zsi:reified-construct-type;
    kind-of(zsi:item,zid:05V);

    name("Reified Construct",zid:05W);

    is-abstract(zid:05X);
    root-of(zsi:reified-construct-type,zid:05Y);
.

# REIFIED ASSOCIATION
zsi:reified-association zid:060; isa zsi:reified-association-type;
    kind-of(zsi:reified-construct,zid:061);

    name("Reified Association",zid:062);

    is-abstract(zid:063);
    root-of(zsi:reified-association-type,zid:064);
.

# REIFIED PROPERTY
zsi:reified-property zid:065; isa zsi:reified-property-type;
    kind-of(zsi:reified-construct,zid:066);

    name("Reified Property",zid:067);

    is-abstract(zid:068);
    root-of(zsi:reified-property-type,zid:069);
.

# ==================== Association Types ====================

# -------------- Immutable Associations --------------

# TYPE-INSTANCE
zsi:type-instance zid:06A; isa zsi:association-type;
    kind-of(zsi:pseudo-association,zid:06B);

    external-identifier(tmdm:type-instance, zid:06C);
    name("Type-Instance",zid:06D);
    name("Has Direct Type",zsi:instance,zid:06E);
    name("Has Direct Instances",zsi:type,zid:06F);

    has-role(zsi:type,1,1,zid:06G);
    has-role(zsi:instance,1,1,zid:06H);
.

# -------------- Calculated Associations --------------

# ITEM HAS TYPE
zsi:item-has-type zid:06J; isa zsi:calculated-association-type;
    kind-of(zsi:calculated-association,zid:06K);

    name("Item Has Type",zid:06L);
    name("Has Type",zsi:instance,zid:06M);
    name("Has Instance",zsi:type,zid:06N);

    has-role(zsi:item,1,1,zid:06P);
    has-role(zsi:type,1,1,zid:06Q);

    property(zsi:calculated-association-rule,
        "",zid:06R);
    property(zsi:calculated-association-rule-description,
        "Y is one of X's types if it is an ancestor of X's direct type or one of X's traits.",zid:06T);
.

# TYPE HAS SUPERTYPE
zsi:Type-has-supertype zid:06U; isa zsi:calculated-association-type;
    kind-of(zsi:calculated-association,zid:06V);

    name("Type Has Supertype",zid:06W);
    name("Has Supertype",zsi:subtype,zid:06X);
    name("Has Subtype",zsi:supertype,zid:06Y);

    has-role(zsi:subtype,1,1,zid:070);
    has-role(zsi:supertype,1,1,zid:071);

    property(zsi:calculated-association-rule,
        "",zid:072);
    property(zsi:calculated-association-rule-description,
        "The transitive version of supertype-subtype.",zid:073);
.

# -------------- Reified Associations --------------

# SUPERTYPE-SUBTYPE
zsi:supertype-subtype zid:074; isa zsi:reified-association-type;
    kind-of(zsi:reified-association,zid:075);

    external-identifier(tmdm:supertype-subtype, zid:076);
    name("Supertype-Subtype",zid:077);
    name("Has Direct Supertype",zsi:subtype,zid:078);
    name("Has Direct Subtype",zsi:supertype,zid:079);

    has-role(zsi:supertype,1,1,zid:07A);
    has-role(zsi:subtype,1,1,zid:07B);
.

# ITEM HAS TRAIT
zsi:item-has-trait zid:07C; isa zsi:reified-association-type;
    kind-of(zsi:reified-association,zid:07D);

    name("Item Has Trait",zid:07E);
    name("Has Trait",zsi:item,zid:07F);
    name("Is Trait of",zsi:trait,zid:07G);

    has-role(zsi:item,1,1,zid:07H);
    has-role(zsi:trait,1,1,zid:07J);
.

# FIELD SET LOCK
zsi:field-set-lock zid:07K; isa zsi:reified-association-type;
    kind-of(zsi:reified-association,zid:07L);
    kind-of(zsi:field-lock,zid:07M);

    name("Field Set Lock",zid:07N);

    is-abstract(zid:07P);
    has-role(zsi:item,1,1,zid:07Q);
.

# PROPERTY SET LOCK
zsi:property-set-lock zid:07R; isa zsi:reified-association-type;
    kind-of(zsi:field-set-lock,zid:07T);

    name("Property Set Lock",zid:07U);

    has-role(zsi:property-type,1,1,zid:07V);
.

# ASSOCIATION FIELD SET LOCK
zsi:association-field-set-lock zid:07W; isa zsi:reified-association-type;
    kind-of(zsi:field-set-lock,zid:07X);

    name("Association Field Set Lock",zid:07Y);

    has-role(zsi:association-type,1,1,zid:080);
    has-role(zsi:role,1,1,zid:081);
.

# ==================== Property Types ====================

# -------------- System Properties --------------

# ZID
#--- implemented with subject-identifier with prefix:
#--- http://zutha.net/item/
zsi:zid zid:082; isa zsi:system-property-type;
    kind-of(zsi:system-property,zid:083);

    name("ZID",zid:084);

    has-datatype(xsd:string,zid:085);
    has-unique-value(zid:086);
.


# -------------- Reified Properties --------------

# NAME
zsi:name zid:087; isa zsi:reified-property-type;
    kind-of(zsi:reified-property,zid:088);

    name("Name",zid:089);
    has-datatype(xsd:string,zid:08A);
    has-unique-value(zid:08B);
.

# DESCRIPTION
zsi:description zid:08C; isa zsi:reified-property-type;
    kind-of(zsi:reified-property,zid:08D);

    name("Description",zid:08E);

    has-datatype(xsd:string,zid:08F);
.

# CALCULATED ASSOCIATION RULE
zsi:calculated-association-rule zid:08G; isa zsi:reified-property-type;
    kind-of(zsi:reified-property,zid:08H);

    name("Calculated Association Rule",zid:08J);
    name("Rule",zsi:calculated-association-type,zid:08K);

    has-datatype(xsd:string,zid:08L);
.

# CALCULATED ASSOCIATION RULE DESCRIPTION
zsi:calculated-association-rule-description zid:08M; isa zsi:reified-property-type;
    kind-of(zsi:reified-property,zid:08N);

    name("Calculated Association Rule Description",zid:08P);
    name("Rule Description",zsi:calculated-association-type,zid:08Q);

    has-datatype(xsd:string,zid:08R);
.

# IDENTIFIER
#--- implemented with subject-identifier with prefix:
#--- http://psi.zutha.net/
#--- also implemented as occurrence so that it can be reified
zsi:identifier zid:08T; isa zsi:reified-property-type;
    kind-of(zsi:reified-property,zid:08U);


    name("Identifier",zid:08V);

    has-datatype(xsd:string,zid:08W);
    has-unique-value(zid:08X);
.

# EXTERNAL IDENTIFIER
#--- implemented with subject-identifier
zsi:external-identifier zid:08Y; isa zsi:reified-property-type;
    kind-of(zsi:reified-property,zid:090);

    name("External Identifier",zid:091);

    has-datatype(xsd:anyURI,zid:092);
    has-unique-value(zid:093);
.

# URI
#--- implemented with subject-locator
zsi:uri zid:094; isa zsi:reified-property-type;
    kind-of(zsi:reified-property,zid:095);

    name("URI",zid:096);

    has-datatype(xsd:anyURI,zid:097);
    has-unique-value(zid:098);
.

# ***********************************************************
# ***********************************************************
# ******************** Schema Constructs ********************
# ***********************************************************
# ***********************************************************


# ==================== Schema Item Types ====================

# ROLE COMBINATION
zsi:role-combination zid:099; isa zsi:item-type;
    kind-of(zsi:schema-item,zid:09A);
    has-trait(zsi:role,zid:09B);

    name("Role Combination",zid:09C);

    plays-role(zsi:role-combination,
        zsi:role-combination-constraint,2,*,zid:09D);
    plays-role(zsi:role-combination,
        zsi:association-has-role-combination-constraint,1,1,zid:09E);
.

# ==================== Schema Traits ====================

# FIELD LOCK
zsi:field-lock zid:09F; isa zsi:trait;
    name("Field Lock",zid:09G);

.

# FIELD DECLARER
zsi:field-declarer zid:09H; isa zsi:trait;
    has-trait(zsi:role,zid:09J);

    name("Field Declarer",zid:09K);

    is-abstract(zid:09L);
    plays-role(zsi:field-declarer,
        zsi:field-with-scope-item-declaration,0,*,zid:09M);
    plays-role(zsi:field-declarer,
        zsi:field-with-scope-item-type-declaration,0,*,zid:09N);
    plays-role(zsi:field-declarer,
        zsi:field-declaration,0,*,zid:09P);
.

# ASSOCIATION FIELD DECLARER
zsi:association-field-declarer zid:09Q; isa zsi:trait;
    has-trait(zsi:role,zid:09R);
    kind-of(zsi:field-declarer,zid:09T);

    name("Association Field Declarer",zid:09U);

    plays-role(zsi:association-field-declarer,
        zsi:association-field-declaration,0,*,zid:09V);
.

# PROPERTY DECLARER
zsi:property-declarer zid:09W; isa zsi:trait;
    has-trait(zsi:role,zid:09X);
    kind-of(zsi:field-declarer,zid:09Y);

    name("Property Declarer",zid:0A0);

    plays-role(zsi:property-declarer,
        zsi:property-declaration,0,*,zid:0A1);
.

# ==================== Schema Association Types ====================

# SCHEMA DECLARATION
zsi:schema-declaration zid:0A2; isa zsi:reified-association-type;
    kind-of(zsi:reified-association,zid:0A3);

    name("Schema Declaration",zid:0A4);

    is-abstract(zid:0A5);
.

# ABSTRACT CONSTRAINT
zsi:abstract-constraint zid:0A6; isa zsi:reified-association-type;
    kind-of(zsi:schema-declaration,zid:0A7);

    name("Abstract Constraint",zid:0A8);
    name("Is Abstract",zsi:type,zid:0A9);

    has-role(zsi:type,1,1,zid:0AA);
.

# OVERRIDES DECLARATION
zsi:overrides-declaration zid:0AB; isa zsi:reified-association-type;
     kind-of(zsi:schema-declaration,zid:0AC);

    name("Overrides Declaration",zid:0AD);
    name("Overrides",zsi:overriding-declaration,zid:0AE);
    name("Overridden By",zsi:overridden-declaration,zid:0AF);

    has-role(zsi:overriding-declaration,1,1,zid:0AG);
    has-role(zsi:overridden-declaration,1,1,zid:0AH);
    role-combination(zsi:overriding-declaration,zsi:association-role-constraint,
        zsi:overridden-declaration,zsi:association-role-constraint,zid:0AJ,zid:0AK,zid:0AL,zid:0AM);
    role-combination(zsi:overriding-declaration,zsi:property-declaration,
        zsi:overridden-declaration,zsi:property-declaration,zid:0AN,zid:0AP,zid:0AQ,zid:0AR);
    role-combination(zsi:overriding-declaration,zsi:association-field-declaration,
        zsi:overridden-declaration,zsi:association-field-declaration,zid:0AT,zid:0AU,zid:0AV,zid:0AW);
.

# TYPE HAS ROOT ITEM CONSTRAINT
zsi:type-has-root-item-constraint zid:0AX; isa zsi:reified-association-type;
    kind-of(zsi:schema-declaration,zid:0AY);

    name("Type has Root Item Constraint",zid:0B0);
    name("Descendants have Type",zsi:root-item,zid:0B1);
    name("Has Root Item",zsi:type,zid:0B2);

    has-role(zsi:type,1,1,zid:0B3);
    has-role(zsi:root-item,1,1,zid:0B4);
.

# ITEM TYPE TRAIT DECLARATION
zsi:item-type-trait-declaration zid:0B5; isa zsi:reified-association-type;
    kind-of(zsi:schema-declaration,zid:0B6);

    name("Item Type Trait Declaration",zid:0B7);
    name("May have Trait",zsi:item-type,zid:0B8);
    name("Allowed Trait of",zsi:trait,zid:0B9);

    has-role(zsi:item-type,1,1,zid:0BA);
    has-role(zsi:trait,1,1,zid:0BB);
.

# FIELD DECLARATION
zsi:field-declaration zid:0BC; isa zsi:reified-association-type;
    kind-of(zsi:schema-declaration,zid:0BD);

    name("Field Declaration",zid:0BE);
    name("Declares Field",zsi:field-declarer,zid:0BF);

    is-abstract(zid:0BG);
    has-role(zsi:field-declarer,1,1,zid:0BH);
    has-assoc-prop(zsi:card-min,1,1,zid:0BJ);
    has-assoc-prop(zsi:card-max,1,1,zid:0BK);
    plays-role(zsi:overriding-declaration, zsi:overrides-declaration,0,1,zid:0BL);
    plays-role(zsi:overridden-declaration, zsi:overrides-declaration,0,*,zid:0BM);
.

# PROPERTY DECLARATION
zsi:property-declaration zid:0BN; isa zsi:reified-association-type;
    kind-of(zsi:field-declaration,zid:0BP);

    name("Property Declaration",zid:0BQ);
    name("Declares Property",zsi:property-declarer,zid:0BR);
    name("Declared Property of",zsi:property-type,zid:0BT);

    has-role(zsi:property-declarer,1,1,zid:0BU,zid:0BH,zid:0BV);
    has-role(zsi:property-type,1,1,zid:0BW);
    has-assoc-prop(zsi:property-card-min,1,1,zid:0BX,zid:0BJ,zid:0BY);
    has-assoc-prop(zsi:property-card-max,1,1,zid:0C0,zid:0BK,zid:0C1);
.

# ASSOCIATION FIELD DECLARATION
zsi:association-field-declaration zid:0C2; isa zsi:reified-association-type;
    kind-of(zsi:field-declaration,zid:0C3);

    name("Association Field Declaration",zid:0C4);
    name("Plays Role in Association",zsi:association-field-declarer,zid:0C5);
    name("Association Field Declarer Plays Role",zsi:association-type,zid:0C6);
    name("Played By Association Field Declarer in Association",zsi:role,zid:0C7);

    #--- Constraint must be satisfied, for every instance of this item type
    #--- by the instance itself or one of the instance's supertypes
    has-role(zsi:association-field-declarer,1,1,zid:0C8,zid:0BH,zid:0C9);
    has-role(zsi:role,1,1,zid:0CA);
    has-role(zsi:association-type,1,1,zid:0CB);
    has-assoc-prop(zsi:association-card-min,1,1,zid:0CC,zid:0BJ,zid:0CD);
    has-assoc-prop(zsi:association-card-max,1,1,zid:0CE,zid:0BK,zid:0CF);
.

# ASSOCIATION ROLE CONSTRAINT
zsi:association-role-constraint zid:0CG; isa zsi:reified-association-type;
    kind-of(zsi:schema-declaration,zid:0CH);

    name("Association Role Constraint",zid:0CJ);
    name("Has Role",zsi:association-type,zid:0CK);
    name("Takes Part in Association",zsi:role,zid:0CL);

    has-role(zsi:role,1,1,zid:0CM);
    has-role(zsi:association-type,1,1,zid:0CN);
    has-assoc-prop(zsi:role-card-min,1,1,zid:0CP);
    has-assoc-prop(zsi:role-card-max,1,1,zid:0CQ);
    plays-role(zsi:overriding-declaration, zsi:overrides-declaration,0,1,zid:0CR);
    plays-role(zsi:overridden-declaration, zsi:overrides-declaration,0,*,zid:0CT);
.

# ASSOCIATION PROPERTY CONSTRAINT
zsi:association-property-constraint zid:0CU; isa zsi:reified-association-type;
    kind-of(zsi:schema-declaration,zid:0CV);

    name("Association Property Constraint",zid:0CW);
    name("Has Association Property",zsi:association-type,zid:0CX);
    name("Used by Associations of type",zsi:property-type,zid:0CY);

    has-role(zsi:property-type,1,1,zid:0D0);
    has-role(zsi:association-type,1,1,zid:0D1);
    has-assoc-prop(zsi:property-card-min,1,1,zid:0D2);
    has-assoc-prop(zsi:property-card-max,1,1,zid:0D3);
    plays-role(zsi:overriding-declaration, zsi:overrides-declaration,0,1,zid:0D4);
    plays-role(zsi:overridden-declaration, zsi:overrides-declaration,0,*,zid:0D5);
.

# ROLE COMBINATION CONSTRAINT
zsi:role-combination-constraint zid:0D6; isa zsi:reified-association-type;
    kind-of(zsi:schema-declaration,zid:0D7);

    name("Role Combination Constraint",zid:0D8);
    name("Plays Role in combination with",zsi:type,zid:0D9);
    name("Played by Type in combination with",zsi:role,zid:0DA);
    name("Allows Role combination",zsi:role-combination,zid:0DB);

    has-role(zsi:type,1,1,zid:0DC);
    has-role(zsi:role,1,1,zid:0DD);
    has-role(zsi:role-combination,1,1,zid:0DE);
.

# ASSOCIATION HAS ROLE COMBINATION CONSTRAINT
zsi:association-has-role-combination-constraint zid:0DF; isa zsi:reified-association-type;
    kind-of(zsi:schema-declaration,zid:0DG);

    name("Association Has Role Combination Constraint",zid:0DH);
    name("Constrains Associations of Type",zsi:role-combination,zid:0DJ);
    name("May Have Role Combination",zsi:association-type,zid:0DK);

    has-role(zsi:association-type,1,1,zid:0DL);
    has-role(zsi:role-combination,1,1,zid:0DM);
.

# CONSTRUCT SCOPE CONSTRAINT
zsi:construct-scope-constraint zid:0DN; isa zsi:reified-association-type;
    kind-of(zsi:schema-declaration,zid:0DP);

    name("Construct Scope Constraint",zid:0DQ);
    name("Scope Contains Item(s) of Type",zsi:construct-type,zid:0DR);
    name("Construct Has Scope Containing Item(s) of this Type",zsi:scope-item-type,zid:0DT);

    has-role(zsi:construct-type,1,1,zid:0DU);
    has-role(zsi:scope-item-type,1,1,zid:0DV);
    has-assoc-prop(zsi:scope-item-type-card-min,1,1,zid:0DW);
    has-assoc-prop(zsi:scope-item-type-card-max,1,1,zid:0DX);
.

# FIELD WITH SCOPE ITEM DECLARATION
zsi:field-with-scope-item-declaration zid:0DY; isa zsi:reified-association-type;
    kind-of(zsi:schema-declaration,zid:0E0);

    name("Field with Scope Item Declaration",zid:0E1);
    name("Has Field(s) scoped by Item",zsi:field-declarer,zid:0E2);
    name("Item has Field(s) scoped by Item",zsi:scope-item,zid:0E3);

    is-abstract(zid:0E4);
    has-role(zsi:field-declarer,1,1,zid:0E5);
    has-role(zsi:scope-item,1,1,zid:0E6);
    has-assoc-prop(zsi:field-card-min,1,1,zid:0E7);
    has-assoc-prop(zsi:field-card-max,1,1,zid:0E8);
.

# FIELD WITH SCOPE ITEM TYPE DECLARATION
zsi:field-with-scope-item-type-declaration zid:0E9; isa zsi:reified-association-type;
    kind-of(zsi:schema-declaration,zid:0EA);

    name("Field with Scope Item Type Declaration",zid:0EB);
    name("Has Field(s) scoped by Item of Type",zsi:field-declarer,zid:0EC);
    name("Item has Field(s) scoped by Item of this Type",zsi:scope-item-type,zid:0ED);

    is-abstract(zid:0EE);
    has-role(zsi:field-declarer,1,1,zid:0EF);
    has-role(zsi:scope-item-type,1,1,zid:0EG);
    has-assoc-prop(zsi:field-card-min,1,1,zid:0EH);
    has-assoc-prop(zsi:field-card-max,1,1,zid:0EJ);
.

# PROPERTY WITH SCOPE ITEM DECLARATION
zsi:property-with-scope-item-declaration zid:0EK; isa zsi:reified-association-type;
    kind-of(zsi:field-with-scope-item-declaration,zid:0EL);

    name("Property with Scope Item Declaration",zid:0EM);
    name("Has Property(s) scoped by Item",zsi:property-declarer,zid:0EN);
    name("Used by Property Declarer, scoped by Item",zsi:property-type,zid:0EP);
    name("Scopes Properties of Property Declarer",zsi:scope-item,zid:0EQ);

    has-role(zsi:property-declarer,1,1,zid:0ER,zid:0E5,zid:0ET);
    has-role(zsi:property-type,1,1,zid:0EU);
    has-assoc-prop(zsi:property-card-min,1,1,zid:0EV,zid:0E7,zid:0EW);
    has-assoc-prop(zsi:property-card-max,1,1,zid:0EX,zid:0E8,zid:0EY);
.

# PROPERTY WITH SCOPE ITEM TYPE DECLARATION
zsi:property-with-scope-item-type-declaration zid:0F0; isa zsi:reified-association-type;
    kind-of(zsi:field-with-scope-item-type-declaration,zid:0F1);

    name("Property with Scope Item Type Declaration",zid:0F2);
    name("Has Property(s) scoped by Item of Type",zsi:property-declarer,zid:0F3);
    name("Used by Property Declarer, scoped by Item Type",zsi:property-type,zid:0F4);
    name("Property Declarer has Property(s) scoped by Item of this Type",zsi:scope-item-type,zid:0F5);

    has-role(zsi:property-declarer,1,1,zid:0F6,zid:0EF,zid:0F7);
    has-role(zsi:property-type,1,1,zid:0F8);
    has-assoc-prop(zsi:property-card-min,1,1,zid:0F9,zid:0EH,zid:0FA);
    has-assoc-prop(zsi:property-card-max,1,1,zid:0FB,zid:0EJ,zid:0FC);
.

# ASSOCIATION FIELD WITH SCOPE ITEM DECLARATION
zsi:association-field-with-scope-item-declaration zid:0FD; isa zsi:reified-association-type;
    kind-of(zsi:field-with-scope-item-declaration,zid:0FE);

    name("Association Field with Scope Item Declaration",zid:0FF);
    name("Has Field(s) scoped by Item",zsi:association-field-declarer,zid:0FG);
    name("Used by Association Field Declarer, scoped by Item",zsi:association-type,zid:0FH);
    name("Used by Association Field Declarer with Association Type, scoped by Item",zsi:role,zid:0FJ);
    name("Item has Field(s) scoped by Item",zsi:scope-item,zid:0FK);

    has-role(zsi:association-field-declarer,1,1,zid:0FL,zid:0E5,zid:0FM);
    has-role(zsi:association-type,1,1,zid:0FN);
    has-role(zsi:role,1,1,zid:0FP);
.

# ASSOCIATION FIELD WITH SCOPE ITEM TYPE DECLARATION
zsi:association-field-with-scope-item-type-declaration zid:0FQ; isa zsi:reified-association-type;
    kind-of(zsi:field-with-scope-item-type-declaration,zid:0FR);

    name("Association Field with Scope Item Type Declaration",zid:0FT);
    name("Has Field(s) scoped by Item of Type",zsi:association-field-declarer,zid:0FU);
    name("Used by Association Field Declarer, scoped by Item of Type",zsi:association-type,zid:0FV);
    name("Used by Association Field Declarer with Association Type, scoped by Item of Type",zsi:role,zid:0FW);
    name("Item has Association Field(s) scoped by Item of this Type",zsi:scope-item-type,zid:0FX);

    has-role(zsi:association-field-declarer,1,1,zid:0FY,zid:0EF,zid:0G0);
    has-role(zsi:association-type,1,1,zid:0G1);
    has-role(zsi:role,1,1,zid:0G2);
.

# UNIQUE VALUE CONSTRAINT
zsi:unique-value-constraint zid:0G3; isa zsi:reified-association-type;
    kind-of(zsi:schema-declaration,zid:0G4);

    name("Unique Value Constraint",zid:0G5);
    name("Has Unique Value",zsi:property-type,zid:0G6);

    has-role(zsi:property-type,1,1,zid:0G7);
.

# PROPERTY DATA TYPE CONSTRAINT
zsi:property-datatype-constraint zid:0G8; isa zsi:reified-association-type;
    kind-of(zsi:schema-declaration,zid:0G9);

    name("Property Data Type Constraint",zid:0GA);
    name("Has Datatype",zsi:property-type,zid:0GB);

    has-role(zsi:property-type,1,1,zid:0GC);
    has-role(zsi:datatype,1,1,zid:0GD);
.

# REGULAR EXPRESSION CONSTRAINT
zsi:regular-expression-constraint zid:0GE; isa zsi:reified-association-type;
    kind-of(zsi:schema-declaration,zid:0GF);

    name("Regular Expression Constraint",zid:0GG);
    name("Matches Regexp",zsi:property-type,zid:0GH);

    has-role(zsi:property-type,1,1,zid:0GJ);
    has-assoc-prop(zsi:regexp,1,1,zid:0GK);
.

# ==================== Schema Roles ====================

# ROOT ITEM
zsi:root-item zid:0GL; isa zsi:role;
    name("Root Item",zid:0GM);
.

# SCOPE ITEM
zsi:scope-item zid:0GN; isa zsi:role;
    name("Scope Item",zid:0GP);
.

# SCOPE ITEM TYPE
zsi:scope-item-type zid:0GQ; isa zsi:role;
    name("Scope Item Type",zid:0GR);
.

# OVERRIDING DECLARATION
zsi:overriding-declaration zid:0GT; isa zsi:role;
    name("Overriding Declaration",zid:0GU);
.

# OVERRIDDEN DECLARATION
zsi:overridden-declaration zid:0GV; isa zsi:role;
    name("Overridden Declaration",zid:0GW);
.

# ==================== Schema Property Types ====================

# REGEXP
zsi:regexp zid:0GX; isa zsi:association-property-type;
    kind-of(zsi:association-property,zid:0GY);

    external-identifier(tmcl:regexp, zid:0H0);
    name("Regular Expression",zid:0H1);
    name("Regexp",zsi:property-type,zid:0H2);

    has-datatype(xsd:string,zid:0H3);
.

# MIN CARDINALITY
zsi:card-min zid:0H4; isa zsi:association-property-type;
    kind-of(zsi:association-property,zid:0H5);

    external-identifier(tmcl:card-min, zid:0H6);
    name("Min Cardinality",zid:0H7);

    has-datatype(zsi:non-negative-integer,zid:0H8);
.

# MAX CARDINALITY
zsi:card-max zid:0H9; isa zsi:association-property-type;
    kind-of(zsi:association-property,zid:0HA);

    external-identifier(tmcl:card-max, zid:0HB);
    name("Max Cardinality",zid:0HC);

    has-datatype(zsi:unbounded-non-negative-integer,zid:0HD);
.

# ROLE MIN CARDINALITY
zsi:role-card-min
    kind-of(zsi:card-min,zid:0HE);
    zid:0HF; isa zsi:association-property-type;

    name("Role Min Cardinality",zid:0HG);
.

# ROLE MAX CARDINALITY
zsi:role-card-max zid:0HH; isa zsi:association-property-type;
    kind-of(zsi:card-max,zid:0HJ);

    name("Role Max Cardinality",zid:0HK);
.

# FIELD MIN CARDINALITY
zsi:field-card-min zid:0HL; isa zsi:association-property-type;
    kind-of(zsi:card-min,zid:0HM);

    name("Field Min Cardinality",zid:0HN);
.

# FIELD MAX CARDINALITY
zsi:field-card-max zid:0HP; isa zsi:association-property-type;
    kind-of(zsi:card-max,zid:0HQ);

    name("Field Max Cardinality",zid:0HR);
.

# ASSOCIATION MIN CARDINALITY
zsi:association-card-min zid:0HT; isa zsi:association-property-type;
    kind-of(zsi:field-card-min,zid:0HU);

    name("Association Min Cardinality",zid:0HV);
.

# ASSOCIATION MAX CARDINALITY
zsi:association-card-max zid:0HW; isa zsi:association-property-type;
    kind-of(zsi:field-card-max,zid:0HX);

    name("Association Max Cardinality",zid:0HY);
.

# PROPERTY MIN CARDINALITY
zsi:property-card-min zid:0J0; isa zsi:association-property-type;
    kind-of(zsi:field-card-min,zid:0J1);

    name("Property Min Cardinality",zid:0J2);
.

# PROPERTY MAX CARDINALITY
zsi:property-card-max zid:0J3; isa zsi:association-property-type;
    kind-of(zsi:field-card-max,zid:0J4);

    name("Property Max Cardinality",zid:0J5);
.

# REIFIER MIN CARDINALITY
zsi:reifier-card-min zid:0J6; isa zsi:association-property-type;
    kind-of(zsi:card-min,zid:0J7);

    name("Reifier Min Cardinality",zid:0J8);
.

# REIFIER MAX CARDINALITY
zsi:reifier-card-max zid:0J9; isa zsi:association-property-type;
    kind-of(zsi:card-max,zid:0JA);

    name("Reifier Max Cardinality",zid:0JB);
.

# SCOPE ITEM MIN CARDINALITY
zsi:scope-item-card-min zid:0JC; isa zsi:association-property-type;
    kind-of(zsi:card-min,zid:0JD);

    name("Scope Item Min Cardinality",zid:0JE);
.

# SCOPE ITEM MAX CARDINALITY
zsi:scope-item-card-max zid:0JF; isa zsi:association-property-type;
    kind-of(zsi:card-max,zid:0JG);

    name("Scope Item Max Cardinality",zid:0JH);
.

# SCOPE ITEM TYPE MIN CARDINALITY
zsi:scope-item-type-card-min zid:0JJ; isa zsi:association-property-type;
    kind-of(zsi:card-min,zid:0JK);

    name("Scope Item Type Min Cardinality",zid:0JL);
.

# SCOPE ITEM TYPE MAX CARDINALITY
zsi:scope-item-type-card-max zid:0JM; isa zsi:association-property-type;
    kind-of(zsi:card-max,zid:0JN);

    name("Scope Item Type Max Cardinality",zid:0JP);
.

# ==================== Data Types ====================

# STRING
zsi:string zid:0JQ; isa zsi:datatype;

    external-identifier(xsd:string, zid:0JR);
    name("String",zid:0JT);
.

# ANY URI
zsi:any-uri zid:0JU; isa zsi:datatype;

    external-identifier(xsd:anyURI, zid:0JV);
    name("String",zid:0JW);
.

# NON-NEGATIVE INTEGER
zsi:non-negative-integer zid:0JX; isa zsi:datatype;

    external-identifier(xsd:nonNegativeInteger, zid:0JY);
    name("Non-Negative Integer",zid:0K0);
.

# UNBOUNDED NON-NEGATIVE INTEGER
zsi:unbounded-non-negative-integer zid:0K1; isa zsi:datatype;

    external-identifier(iso:ctm-integer, zid:0K2);
    name("Unbounded Non-Negative Integer",zid:0K3);
.

# ==================== Topic Map Implementation Constructs ====================

# ASSOCIATION: ANONYMOUS TOPIC LINK
#--- An association between a ZDM reified association
#--- and an anonymous topic.
#--- Used for locating the anonymous topic when the ZDM association
#--- is deleted so the anonymous topic can also be deleted
ztm:anonymous-topic-link isa ztm:anonymous-topic.

# TOPIC,ROLE: ANONYMOUS TOPIC
#--- A topic that doesn't exist in the ZDM.
#--- May be used for implementing ZDM concepts in TM friendly form
ztm:anonymous-topic isa ztm:anonymous-topic.

# ROLE: REIFIED ZDM ASSOCIATION
ztm:reified-zdm-association isa ztm:anonymous-topic.

# ==================== Core Item Types====================

# ------------------- Identity --------------------
#IDENTITY
zsi:identity zid:0K4; isa zsi:entity-type;
    has-trait(zsi:role,zid:0K5);
    kind-of(zsi:zutha-object,zid:0K6);

    name("Identity",zid:0K7);

    plays-role(zsi:identity,
        zsi:user-owns-identity,0,1,zid:0K8);
.

# ZUTHA IDENTITY
#---An authenticated agent that can perform actions on the Zutha knowledgebase
zsi:zutha-identity zid:0K9; isa zsi:entity-type;
    kind-of(zsi:identity,zid:0KA);

    name("Zutha Identity",zid:0KB);
.

# INDEPENDENT ZUTHA IDENTITY
#---A means of authentication that does not rely on a 3rd party such as a public key
zsi:independent-zutha-identity zid:0KC; isa zsi:entity-type;
    kind-of(zsi:zutha-identity,zid:0KD);

    name("Independent Zutha Identity",zid:0KE);
.

# ASYMMETRIC KEY IDENTITY
zsi:asymmetric-key-identity zid:0KF; isa zsi:entity-type;
    kind-of(zsi:independent-zutha-identity,zid:0KG);

    name("Asymmetric Key Identity",zid:0KH);

    has-property(zsi:public-key,1,1,zid:0KJ);
    plays-role(zsi:asymmetric-key-identity,
        zsi:asymmetric-key-identity-uses-encryption-scheme,1,1,zid:0KK);
.

# DEPENDENT ZUTHA IDENTITY
#---A means of authentication that relies on a 3rd party to vouch for you on Zutha such as an OpenID or simple password
zsi:dependent-zutha-identity zid:0KL; isa zsi:entity-type;
    kind-of(zsi:zutha-identity,zid:0KM);

    name("Dependent Zutha Identity",zid:0KN);

    plays-role(zsi:identity,
        zsi:zutha-identity-provider-provides-identity,1,1,zid:0KP);
.

# OPENID IDENTITY
zsi:openid-identity zid:0KQ; isa zsi:entity-type;
    kind-of(zsi:identity,zid:0KR);

    name("OpenID Identity",zid:0KT);

    has-property(zsi:openid-uri,1,1,zid:0KU);
.

# ==================== Core Traits ====================

# USER
zsi:user zid:0KV; isa zsi:trait;
    has-trait(zsi:role,zid:0KW);

    name("User",zid:0KX);

    plays-role(zsi:user,
        zsi:user-owns-identity,0,*,zid:0KY);
.

# ZUTHA IDENTITY PROVIDER
zsi:zutha-identity-provider zid:0L0; isa zsi:trait;
    has-trait(zsi:role,zid:0L1);
    
    name("Zutha Identity Provider",zid:0L2);

    plays-role(zsi:zutha-identity-provider,
        zsi:zutha-identity-provider-provides-identity,0,*,zid:0L3);
.

# ==================== Core Associations ====================

# USER OWNS IDENTITY
zsi:user-owns-identity zid:0L4; isa zsi:reified-association-type;
    kind-of(zsi:reified-association,zid:0L5);

    name("User Owns Identity",zid:0L6);
    name("Owned By",zsi:identity,zid:0L7);
    name("Owns Identities",zsi:identity,zid:0L8);

    has-role(zsi:user,1,1,zid:0L9);
    has-role(zsi:identity,1,1,zid:0LA);
.

# ZUTHA IDENTITY PROVIDER PROVIDES IDENTITY
zsi:zutha-identity-provider-provides-identity zid:0LB; isa zsi:reified-association-type;
    kind-of(zsi:reified-association,zid:0LC);
    
    name("Zutha Identity Provider Provides Identity",zid:0LD);

    has-role(zsi:zutha-identity-provider,1,1,zid:0LE);
    has-role(zsi:identity,1,1,zid:0LF);
.

# ASYMMETRIC KEY IDENTITY USES ENCRYPTION SCHEME
zsi:asymmetric-key-identity-uses-encryption-scheme zid:0LG; isa zsi:reified-association-type;
    kind-of(zsi:reified-association,zid:0LH);

    name("Asymmetric Key Identity Use Encryption Scheme",zid:0LJ);

    has-role(zsi:asymmetric-key-identity,1,1,zid:0LK);
    has-role(zsi:encryption-scheme,1,1,zid:0LL);
.

# ==================== Core Properties ====================



zsi:technology zid:0LM; isa zsi:entity-type;
    kind-of(zsi:entity,zid:0LN);

    name("Technology",zid:0LP);
.

zsi:cryptographic-technology zid:0LQ; isa zsi:entity-type;
    kind-of(zsi:technology,zid:0LR);

    name("Cryptographic Technology",zid:0LT);
.

zsi:encryption-scheme zid:0LU; isa zsi:entity-type;
    kind-of(zsi:cryptographic-technology,zid:0LV);

    name("Encryption Scheme",zid:0LW);
.

# OPENID URI
zsi:openid-uri zid:0LX; isa zsi:reified-property-type;
    kind-of(zsi:reified-property,zid:0LY);

    name("OpenID URI",zid:0M0);

    has-datatype(xsd:anyURI,zid:0M1);
    has-unique-value(zid:0M2);
.

# PUBLIC KEY
zsi:public-key zid:0M3; isa zsi:reified-property-type;
    kind-of(zsi:reified-property,zid:0M4);

    name("Public Key",zid:0M5);

    has-datatype(xsd:string,zid:0M6);
    has-unique-value(zid:0M7);
.
# ==================== Item Types ====================

# WRITTEN WORK
zsi:written-work zid:0M8; isa zsi:entity-type;
    has-trait(zsi:role,zid:0M9);
    kind-of(zsi:zutha-object,zid:0MA);

    name("Written Work",zid:0MB);

    plays-role(zsi:written-work,
        zsi:authorship,1,1,zid:0MC);
.

# BOOK
zsi:book zid:0MD; isa zsi:entity-type;
    has-trait(zsi:role,zid:0ME);
    kind-of(zsi:written-work,zid:0MF);

    name("Book",zid:0MG);

    plays-role(zsi:book,
        zsi:book-series-membership,0,1,zid:0MH);
.

# ARTICLE
zsi:article zid:0MJ; isa zsi:entity-type;
    kind-of(zsi:written-work,zid:0MK);

    name("Article (Written Work)",zid:0ML);
    name("Article",zsi:written-work,zid:0MM);
.

# BOOK SERIES
zsi:book-series zid:0MN; isa zsi:entity-type;
    has-trait(zsi:role,zid:0MP);
    kind-of(zsi:written-work,zid:0MQ);

    name("Book Series",zid:0MR);

    plays-role(zsi:book-series,
        zsi:book-series-membership,1,*,zid:0MT);
.

# ==================== Traits ====================

# AUTHOR
zsi:author zid:0MU; isa zsi:trait;
    has-trait(zsi:role,zid:0MV);

    name("Author",zid:0MW);
    name("Co-Authors",zsi:author,zid:0MX);

    plays-role(zsi:author,
        zsi:authorship,0,*,zid:0MY);
.

# ==================== Association Types ====================

# AUTHORSHIP
zsi:authorship zid:0N0; isa zsi:reified-association-type;
    kind-of(zsi:reified-association,zid:0N1);

    name("Authorship",zid:0N2);
    name("Written By",zsi:written-work,zid:0N3);
    name("Works Written",zsi:author,zid:0N4);

    has-role(zsi:author,1,*,zid:0N5);
    has-role(zsi:written-work,1,1,zid:0N6);
.
def written-by($work, $author, $reifier)
    $reifier isa zsi:authorship.
    zsi:authorship(
        zsi:author: $author,
        zsi:written-work: $work
    ) ~ $reifier
end
def written-by($work, $author1, $author2, $reifier)
    $reifier isa zsi:authorship.
    zsi:authorship(
        zsi:author: $author1,
        zsi:author: $author2,
        zsi:written-work: $work
    ) ~ $reifier
end

# BOOK SERIES MEMBERSHIP
zsi:book-series-membership zid:0N7; isa zsi:reified-association-type;
    kind-of(zsi:reified-association,zid:0N8);

    name("Book Series Membership",zid:0N9);
    name("Member of Series",zsi:book,zid:0NA);
    name("Included Works",zsi:book-series,zid:0NB);

    has-role(zsi:book-series,1,1,zid:0NC);
    has-role(zsi:book,1,1,zid:0ND);
.
def member-of($book, $series, $reifier)
    $reifier isa zsi:book-series-membership.
    zsi:book-series-membership(
        zsi:book: $book,
        zsi:book-series: $series
    ) ~ $reifier
end

# ==================== Property Types ====================
# ==================== Item Types ====================

# PERSON
zsi:person zid:0NE; isa zsi:entity-type;
    has-trait(zsi:role,zid:0NF);
    kind-of(zsi:zutha-object,zid:0NG);

    name("Person",zid:0NH);

    may-have-trait(zsi:author,zid:0NJ);
    may-have-trait(zsi:user,zid:0NK);
.
#------------------ Authors -----------------
# Robert Jordan
robert-jordan zid:0NL; isa zsi:person;
    has-trait(zsi:author,zid:0NM);

    name("Robert Jordan",zid:0NN);
.

# Raymond E. Feist
raymond-feist zid:0NP; isa zsi:person;
    has-trait(zsi:author,zid:0NQ);

    name("Raymond E. Feist",zid:0NR);
.

# Janny Wurts
janny-wurts zid:0NT; isa zsi:person;
    has-trait(zsi:author,zid:0NU);

    name("Janny Wurts",zid:0NV);
.

#------------------ Books -----------------

# Magician
magician zid:0NW; isa zsi:book;
    name("Magician",zid:0NX);
    written-by(raymond-feist, zid:0NY);
.
# Daughter of the Empire
daughter-of-the-empire zid:0P0; isa zsi:book;
    name("Daughter of the Empire",zid:0P1);
    written-by(raymond-feist, janny-wurts, zid:0P2);
.
# The Eye of the World
eye-of-the-world zid:0P3; isa zsi:book;
    name("The Eye of the World",zid:0P4);
    written-by(robert-jordan, zid:0P5);
    member-of(wheel-of-time, zid:0P6);
.
# The Great Hunt
great-hunt zid:0P7; isa zsi:book;
    name("The Great Hunt",zid:0P8);
    written-by(robert-jordan, zid:0P9);
    member-of(wheel-of-time, zid:0PA);
.

#------------------ Book Series -----------------
# The Wheel of Time
wheel-of-time zid:0PB; isa zsi:book-series;
    name("The Wheel of Time",zid:0PC);
    written-by(robert-jordan, zid:0PD);
.
